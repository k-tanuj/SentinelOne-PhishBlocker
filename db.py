# db.py
from hdbcli import dbapi
import logging
import json
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Connect to SAP HANA Cloud
def get_connection():
    return dbapi.connect(
        address="754db17e-af16-4009-9baa-1bca994a48de.hana.trial-us10.hanacloud.ondemand.com",
        port=443,
        user="DBADMIN",
        password="Tcs@18420",
        encrypt=True,
        sslValidateCertificate=False
    )

def create_table_if_not_exists():
    """Create the phishing logs table if it doesn't exist"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        try:
            # Create schema - SAP HANA syntax (no IF NOT EXISTS for schema)
            try:
                cursor.execute("CREATE SCHEMA SENTINELONE")
                print("✅ Schema SENTINELONE created")
            except Exception as e:
                if "already exists" in str(e).lower():
                    print("✅ Schema SENTINELONE already exists")
                else:
                    print(f"Schema creation note: {e}")
            
            # Create table - SAP HANA syntax (no IF NOT EXISTS)
            try:
                cursor.execute("""
                    CREATE TABLE SENTINELONE.PHISHING_LOGS (
                        ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        URL NVARCHAR(2000) NOT NULL,
                        RESULT NVARCHAR(50) NOT NULL,
                        CONFIDENCE DECIMAL(5,3) NOT NULL,
                        RISK_LEVEL NVARCHAR(20),
                        RISK_FACTORS NCLOB,
                        URL_LENGTH INTEGER,
                        DOMAIN_LENGTH INTEGER,
                        SPECIAL_CHARS INTEGER,
                        URL_ENTROPY DECIMAL(5,3),
                        DOMAIN_ENTROPY DECIMAL(5,3),
                        SUBDOMAINS INTEGER,
                        USER_AGENT NVARCHAR(500),
                        IP_ADDRESS NVARCHAR(45),
                        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                conn.commit()
                logger.info("✅ Table SENTINELONE.PHISHING_LOGS created successfully")
            except Exception as e:
                if "already exists" in str(e).lower():
                    logger.info("✅ Table SENTINELONE.PHISHING_LOGS already exists")
                else:
                    logger.warning(f"Table creation issue: {str(e)}")
        finally:
            cursor.close()
            conn.close()
    except Exception as e:
        logger.warning(f"Could not create table: {str(e)}")

# Function to log phishing detection result to SAP HANA
def log_to_hana(url, result, confidence, risk_level=None, risk_factors=None, 
                url_features=None, user_agent=None, ip_address=None):
    try:
        conn = get_connection()
        cursor = conn.cursor()
        try:
            # Convert risk_factors list to JSON string if provided
            risk_factors_str = json.dumps(risk_factors) if risk_factors else None
            
            # Extract URL features if provided
            url_length = url_features.get('url_length', 0) if url_features else len(url)
            domain_length = url_features.get('domain_length', 0) if url_features else 0
            special_chars = url_features.get('number_of_special_char_in_url', 0) if url_features else 0
            url_entropy = url_features.get('entropy_of_url', 0) if url_features else 0
            domain_entropy = url_features.get('entropy_of_domain', 0) if url_features else 0
            subdomains = url_features.get('number_of_subdomains', 0) if url_features else 0
            
            cursor.execute("""
                INSERT INTO SENTINELONE.PHISHING_LOGS 
                (URL, RESULT, CONFIDENCE, RISK_LEVEL, RISK_FACTORS, 
                 URL_LENGTH, DOMAIN_LENGTH, SPECIAL_CHARS, URL_ENTROPY, DOMAIN_ENTROPY, SUBDOMAINS,
                 USER_AGENT, IP_ADDRESS)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (url, result, confidence, risk_level, risk_factors_str,
                  url_length, domain_length, special_chars, url_entropy, domain_entropy, subdomains,
                  user_agent, ip_address))
            conn.commit()
            logger.info(f"✅ Successfully logged to HANA: {url} -> {result}")
            return True
        finally:
            cursor.close()
            conn.close()
    except Exception as e:
        logger.warning(f"HANA logging failed: {str(e)}")
        return False

def get_all_logs(limit=100):
    """Retrieve all phishing detection logs from HANA Cloud database"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("""
                SELECT ID, URL, RESULT, CONFIDENCE, RISK_LEVEL, RISK_FACTORS, 
                       URL_LENGTH, DOMAIN_LENGTH, SPECIAL_CHARS, URL_ENTROPY, DOMAIN_ENTROPY, SUBDOMAINS,
                       USER_AGENT, IP_ADDRESS, CREATED_AT 
                FROM SENTINELONE.PHISHING_LOGS 
                ORDER BY CREATED_AT DESC 
                LIMIT ?
            """, (limit,))
            
            rows = cursor.fetchall()
            
            # Convert to list of dictionaries
            columns = [desc[0] for desc in cursor.description]
            logs = []
            for row in rows:
                log_dict = dict(zip(columns, row))
                if log_dict.get('CREATED_AT'):
                    log_dict['CREATED_AT'] = log_dict['CREATED_AT'].isoformat()
                if log_dict.get('RISK_FACTORS'):
                    try:
                        log_dict['RISK_FACTORS'] = json.loads(log_dict['RISK_FACTORS'])
                    except:
                        pass
                logs.append(log_dict)
            
            return logs
        finally:
            cursor.close()
            conn.close()
    except Exception as e:
        logger.warning(f"Could not retrieve logs: {str(e)}")
        return []

def get_statistics():
    """Get comprehensive statistics from the phishing detection logs"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        try:
            # Get total scans
            cursor.execute("SELECT COUNT(*) FROM SENTINELONE.PHISHING_LOGS")
            total_scans = cursor.fetchone()[0]
            
            # Get results breakdown
            cursor.execute("""
                SELECT RESULT, COUNT(*) as count 
                FROM SENTINELONE.PHISHING_LOGS 
                GROUP BY RESULT
            """)
            results_breakdown = dict(cursor.fetchall())
            
            return {
                "total_scans": total_scans,
                "results_breakdown": results_breakdown
            }
        finally:
            cursor.close()
            conn.close()
    except Exception as e:
        logger.warning(f"Could not get statistics: {str(e)}")
        return {"error": "Database not available", "total_scans": 0}

def test_connection():
    """Test the database connection"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT CURRENT_USER FROM DUMMY")
        user = cursor.fetchone()[0]
        
        cursor.close()
        conn.close()
        return True, f"Connected as {user}"
    except Exception as e:
        return False, str(e)

# Legacy function for backward compatibility
def log_result_to_db(url, prediction, confidence):
    """Legacy function"""
    return log_to_hana(url, prediction, confidence)